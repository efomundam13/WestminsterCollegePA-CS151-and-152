
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class SudokuGame extends JFrame implements ActionListener {
	
	private JButton hintButton, resetButton, solveButton, undoButton, guessButton;
	private static JTextField[][] grid;
	private static int [][] board;
	private JPanel sidePanel, gridPanel;
	static SudokuGenerator sg = new SudokuGenerator();
	
	public SudokuGame() {
		setTitle("Sudoku Board");
		setSize(450,350);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        
		hintButton = new JButton("Hint");
		hintButton.addActionListener(this);
		resetButton = new JButton("Reset");
		resetButton.addActionListener(this);
		solveButton = new JButton("Solve");
		solveButton.addActionListener(this);
		undoButton = new JButton("Undo");
		undoButton.addActionListener(this);
		guessButton = new JButton("Guess");
		guessButton.addActionListener(this);
		
		sidePanel = new JPanel(new GridLayout(5,1,15,15));
		gridPanel = new JPanel(new GridLayout(9,9));
		
		grid = new JTextField[9][9];
		gridPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
		for(int i = 0; i < 9; i++) {
			for(int j = 0; j < 9; j++) {
				int row = (i % 3) + (j % 3) * 3;
				int col = (i / 3) + (j / 3) * 3;
				grid[i][j] = new JTextField();
				grid[i][j].setHorizontalAlignment(JTextField.CENTER);
				grid[i][j].setText("");
				gridPanel.add(grid[i][j]);
			}
		}
		
		sidePanel.add(hintButton);
		sidePanel.add(resetButton);
		sidePanel.add(solveButton);
		sidePanel.add(undoButton);
		sidePanel.add(guessButton);
		
		add(sidePanel, BorderLayout.EAST);
		add(gridPanel, BorderLayout.CENTER);
	}
	
	public void actionPerformed(ActionEvent e) {
		sg = new SudokuGenerator();
		Object button = e.getSource();
			if(button == hintButton) {
				System.out.println("<< HINT >>");
			}
		//else if(button.equals("Reset")) {
			else if(button == resetButton) {
				int[][] puzzle = new int[9][9];
				sg.generatePuzzle();
				puzzle = sg.getPuzzle();
					
				System.out.println("<< RESET >>");
				for(int i = 0; i < 9; i++) {
					for(int j = 0; j < 9; j++) {
						int x = puzzle[i][j];
						if(x == 0) {
							grid[i][j].setText("" + x);
							grid[i][j].setEditable(true);
							}
						else {
							grid[i][j].setText("" + x);
							grid[i][j].setEditable(false);
							}
						}		
					}
				this.gridPanel.repaint();
				this.repaint();
				}
			else if(button == solveButton) {
				System.out.print("<< SOLVE >>");
			}
			else if(button == undoButton) {
				System.out.println("<< UNDO >>");
			}
			else if(button == guessButton) {
				System.out.print("<< GUESS >>");
			}
		}
	
	public static void printArray(int[][] array){
		if(array.length > 0) {
			for (int row = 0; row < array.length; row++) {
				 for (int column = 0; column < array[row].length; column++) {
					 System.out.print(array[row][column] + " ");
					 }
				 System.out.println();
				 }
			}
		else {
			System.out.println("No Elements in array");}
		}
	
	public static void main(String[] args) {
		SudokuGame window = new SudokuGame();
		
		sg.setSymmetry(true);
		sg.setValsInPuzzle(10);
		sg.generatePuzzle();
		sg.getPuzzle();
		sg.getSolution();
		printArray(sg.getPuzzle());
		
		window.setVisible(true);
		System.out.println();
		}
	}
