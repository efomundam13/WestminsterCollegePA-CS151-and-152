
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class SudokuTemp extends JFrame implements ActionListener {
	
	private JButton guessButton, hintButton, resetButton, checkButton, undoButton;
	private JPanel sidePanel, gridPanel;
	private static int[][] puzzle = new int[9][9];
	private static int[][] result = new int[9][9];
	private static JTextField[][] grid = new JTextField[9][9]; 
	static SudokuGenerator sg = new SudokuGenerator();
	BoxListener x = new BoxListener();
	static Random rnd = new Random();
	
	public SudokuTemp() {
		setTitle("Sudoku Board");
		setSize(450,350);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);
        
		hintButton = new JButton("Hint");
		hintButton.addActionListener(this);
		resetButton = new JButton("Reset");
		resetButton.addActionListener(this);
		checkButton = new JButton("Check");
		checkButton.addActionListener(this);
		
		sidePanel = new JPanel(new GridLayout(3,1,15,15));
		gridPanel = new JPanel(new GridLayout(9,9));
		
		gridPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 5));
		for(int i = 0; i < 9; i++) {
			for(int j = 0; j < 9; j++) {
				sg.setSymmetry(true);
				sg.setValsInPuzzle(17);
				sg.generatePuzzle();
				puzzle = sg.getPuzzle();
				result = sg.getSolution();
				grid[i][j] = new JTextField();
				grid[i][j].addActionListener(x);
				grid[i][j].setHorizontalAlignment(JTextField.CENTER);
				grid[i][j].setText("");
				gridPanel.add(grid[i][j]);
			}
		}
		
		sidePanel.add(hintButton);
		sidePanel.add(resetButton);
		sidePanel.add(checkButton);
		
		add(sidePanel, BorderLayout.EAST);
		add(gridPanel, BorderLayout.CENTER);
	}
	
	public void actionPerformed(ActionEvent e) {
		Object button = e.getSource();
			if(button == hintButton) {
				System.out.println("<< HINT >>");
				int hintsUsed = 5;
					int i = rnd.nextInt(9);
					int j = rnd.nextInt(9);
					while(puzzle[i][j] != 0) {
						int x = result[i][j];
						i = rnd.nextInt(9);
						j = rnd.nextInt(9);
						puzzle[i][j] = x;
						grid[i][j].setText("" + x);
						grid[i][j].setBackground(Color.BLUE);
						hintsUsed--;
						if(hintsUsed == 0) {
							JOptionPane.showInternalMessageDialog(null, "No more hints allowed");
						}
					}
					/*	int x = result[i][j];
						if(puzzle[i][j] == 0) {
							grid[rnd.nextInt(grid.length)][rnd.nextInt(grid.length)].setText("" + x);
							hintsUsed--;
							}*/
				}
			else if(button == resetButton) {
				System.out.println("<< RESET >>");
				for(int i = 0; i < 9; i++) {
					for(int j = 0; j < 9; j++) {
						int x = puzzle[i][j];
						grid[i][j].setBackground(Color.WHITE);
						if(x == 0) {
							grid[i][j].setText("" + x);
							grid[i][j].setEditable(true);
							}
						else {
							grid[i][j].setText("" + x);
							grid[i][j].setEditable(false);
							}
						}		
					}
				this.gridPanel.repaint();
				this.repaint();
				}
			else {
				System.out.println("<< CHECK >>");
				for(int i = 0; i < 9; i++) {
					for(int j = 0; j < 9; j++) {
						int y = result[i][j];
						if(puzzle[i][j] == result[i][j]) {
							grid[i][j].setBackground(Color.GREEN);
						}
						else {
							grid[i][j].setBackground(Color.RED);
						}
					}
				}
			}
		}
	
	class BoxListener implements ActionListener {
		
		public void actionPerformed(ActionEvent e) {
			JTextField src = (JTextField) e.getSource();
			for(int i = 0; i < 9; i++) {
				for(int j = 0; j < 9; j++) {
					if(grid[i][j] == src) {
						puzzle[i][j] = result[i][j];
					}
				}
			}
		}
	}
	
	public static void main(String[] args) {
		SudokuTemp window = new SudokuTemp();
		window.setVisible(true);
		}
	}
